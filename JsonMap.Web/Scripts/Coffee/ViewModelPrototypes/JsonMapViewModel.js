// Generated by CoffeeScript 1.6.3
/** 
 * Copyright 2013 MacReport Media Publishing Inc.
 * Licensed under MPL-2.0 (see /LICENSE)
 * If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * Author: Sam Armstrong
*/


(function() {
  var ArgumentJsonMapViewModel, AttributeJsonMapViewModel, EntityJsonMapViewModel, JsonMapViewModel, JsonMapsViewModel, MapToList, TypeListViewModel, ValidationJsonMapViewModel, ValidationMethodListViewModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MapToList = {
    "EntityJsonMapViewModel": "Entitys",
    "AttributeJsonMapViewModel": "Attributes",
    "ValidationJsonMapViewModel": "Validations",
    "ArgumentJsonMapViewModel": "Arguments"
  };

  JsonMapsViewModel = (function(_super) {
    __extends(JsonMapsViewModel, _super);

    function JsonMapsViewModel(initial, data, createAttributeList, createArgumentList) {
      var lastSelected, val, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3,
        _this = this;
      JsonMapsViewModel.__super__.constructor.call(this, initial, data);
      lastSelected = ko.observable(null);
      this.nodeSelected = ko.observable(null);
      this.nodeCreated = ko.observable(null);
      this.nodeDeleted = ko.observable(null);
      this.nodesAdded = ko.observableArray();
      this.nodesUnadded = ko.observableArray();
      this.error = ko.observable(false);
      this.nodeSelectedList = ko.computed(function() {
        if (_this.nodeSelected() != null) {
          return MapToList[_this.nodeSelected().constructor.name];
        } else {
          return null;
        }
      });
      this.nodeCreatedList = ko.computed(function() {
        if (_this.nodeCreated() != null) {
          return MapToList[_this.nodeCreated().constructor.name];
        } else {
          return null;
        }
      });
      this.nodeDeletedType = ko.computed(function() {
        if (_this.nodeDeleted() != null) {
          return MapToList[_this.nodeDeleted().constructor.name];
        }
      });
      this.nodesCombindationNoValues = ko.computed(function() {
        return $(_this.nodesAdded()).not([_this.nodeCreated()]).length === 0 && _this.nodesUnadded().length === 0;
      });
      this.nodesCombination = ko.computed(function() {
        var combination;
        combination = [];
        if (_this.nodeSelected() != null) {
          combination = $.grep(_this.nodeSelected().childList(), function(n) {
            return _this.nodesUnadded.indexOf(n) === -1;
          });
        }
        combination = combination.concat(_this.nodesAdded());
        return combination;
      });
      this.nodeSelectedList.subscribe(function(newValue) {
        _this.nodesAdded.removeAll();
        _this.nodesUnadded.removeAll();
        return _this.nodeCreated(null);
      });
      this.nodeCreated.subscribe(function(newValue) {
        var val, _i, _len, _ref;
        _ref = $.grep(_this.nodesAdded(), function(n) {
          return n.Id() === 0;
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          _this.nodesAdded.remove(val);
        }
        if (newValue != null) {
          return _this.nodesAdded.push(newValue);
        }
      });
      this.createAttributeList = createAttributeList;
      this.createArgumentListObservable = createArgumentList;
      _ref = this.Entitys();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        this.processEntitys(val);
      }
      _ref1 = this.Attributes();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        val = _ref1[_j];
        this.processAttributes(val);
      }
      _ref2 = this.Validations();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        val = _ref2[_k];
        this.processValidations(val);
      }
      _ref3 = this.Arguments();
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        val = _ref3[_l];
        this.processArguments(val);
      }
      this.createSelectedListDisplay("Entitys");
      this.createSelectedListDisplay("Attributes", "Entitys");
      this.createSelectedListDisplay("Validations", "Attributes");
      this.createSelectedListDisplay("Arguments", "Validations");
      this.nodeCreated(null);
      this.nodesAdded.removeAll();
      this.nodesUnadded.removeAll();
    }

    JsonMapsViewModel.prototype.processNewViewModel = function(val) {
      if (val.Id() == null) {
        val.Id(0);
        return val.updateBackup();
      }
    };

    JsonMapsViewModel.prototype.processViewModel = function(val) {
      if ($.grep(this[MapToList[val.constructor.name]](), function(n) {
        return n.Id() === val.Id();
      }).length > 0) {
        val.Id(0);
        return val.updateBackup();
      }
    };

    JsonMapsViewModel.prototype.processNewEntitys = function(val) {
      this.processEntitys(val);
      this.nodeCreated(val);
      return val.GenericOnly(false);
    };

    JsonMapsViewModel.prototype.processNewAttributes = function(val) {
      this.processAttributes(val);
      return this.nodeCreated(val);
    };

    JsonMapsViewModel.prototype.processNewValidations = function(val) {
      this.processValidations(val);
      return this.nodeCreated(val);
    };

    JsonMapsViewModel.prototype.processNewArguments = function(val) {
      this.processArguments(val);
      return this.nodeCreated(val);
    };

    JsonMapsViewModel.prototype.processEntitys = function(val) {
      val.setChildList(this.Attributes);
      return val.setGlobalSelector(this.nodeSelected);
    };

    JsonMapsViewModel.prototype.processAttributes = function(val) {
      val.setChildList(this.Validations);
      val.setParentList(this.Entitys);
      val.setGlobalSelector(this.nodeSelected);
      val.TypeAttributeList = this.createAttributeList(val);
      return val.TypeAttributeList.subscribe(function() {
        return val.restoreBackup();
      });
    };

    JsonMapsViewModel.prototype.processValidations = function(val) {
      val.setChildList(this.Arguments);
      val.setParentList(this.Attributes);
      return val.setGlobalSelector(this.nodeSelected);
    };

    JsonMapsViewModel.prototype.processArguments = function(val) {
      val.setParentList(this.Validations);
      val.setGlobalSelector(this.nodeSelected);
      val.ValidArgumentList = this.createArgumentListObservable(val);
      return val.ValidArgumentList.subscribe(function() {
        return val.restoreBackup();
      });
    };

    JsonMapsViewModel.prototype.processRemoveViewModel = function(val) {
      if (val === this.nodeSelected()) {
        return this.nodeSelected(null);
      }
    };

    JsonMapsViewModel.prototype.createSelectedListDisplay = function(mapList, parentDisplayMapList) {
      var asynchTimer, list, parentList, parentViewModelList, viewModelList,
        _this = this;
      viewModelList = this[mapList];
      list = mapList + "DisplayList";
      parentViewModelList = parentDisplayMapList;
      parentList = parentDisplayMapList + "DisplayList";
      asynchTimer = ko.observable(10);
      this[mapList + "Total"] = ko.computed(function() {
        var mapArr;
        mapArr = viewModelList();
        if (_this.nodeCreated() && _this.nodeCreated().constructor.name === _this.model()["_classes"][mapList]["_base"]) {
          mapArr = [_this.nodeCreated()].concat(mapArr);
        }
        return mapArr;
      });
      this[list] = ko.computed(function() {
        var alternateMapList, extraArr, mapArr, other, parentDisplayLengthEquality, val, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        mapArr = [];
        extraArr = [];
        other = null;
        if (parentDisplayMapList != null) {
          parentDisplayLengthEquality = ko.utils.unwrapObservable(_this[parentList]).length === ko.utils.unwrapObservable(_this[parentViewModelList]).length;
        }
        if (_this.nodeCreated() && _this.nodeCreated().constructor.name === _this.model()["_classes"][mapList]["_base"]) {
          mapArr.push(_this.nodeCreated());
        }
        _ref = viewModelList();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          if (val.selected() || val.childSelected() || val.parentSelected()) {
            mapArr.push(val);
          } else if (val.constructor.name === "ValidationJsonMapViewModel") {
            extraArr.push(val);
          } else if ((parentDisplayMapList != null) && mapArr.length === 0 && !parentDisplayLengthEquality && $.grep(ko.utils.unwrapObservable(_this[parentList]), function(n) {
            return n.childList().indexOf(val) !== -1;
          }).length > 0) {
            other = val;
          }
        }
        mapArr = mapArr.concat(extraArr);
        if (other !== null) {
          mapArr.push(other);
        }
        if (mapArr.length > 0) {
          if (parentDisplayMapList != null) {
            alternateMapList = $.grep(viewModelList(), function(MapItem) {
              return $.grep(ko.utils.unwrapObservable(_this[parentList]), function(parentMapItem) {
                return $.grep(parentMapItem[parentMapItem.childVarName](), function(childMapItem) {
                  return MapItem.Id() === childMapItem.Id();
                }).length > 0;
              }).length > 0;
            });
            for (_j = 0, _len1 = alternateMapList.length; _j < _len1; _j++) {
              val = alternateMapList[_j];
              if (mapArr.indexOf(val) === -1) {
                mapArr.push(val);
              }
            }
          } else {
            _ref1 = viewModelList();
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              val = _ref1[_k];
              if ($.grep(mapArr, function(n) {
                return n.Name() === val.Name();
              }).length > 0) {
                if (mapArr.indexOf(val) === -1) {
                  mapArr.push(val);
                }
              }
            }
          }
          if (_this.nodeCreated() !== null && mapArr.indexOf(_this.nodeCreated()) === -1 && viewModelList().indexOf(_this.nodeCreated()) !== -1) {
            mapArr.push(_this.nodeCreated());
          }
          return mapArr;
        } else if (parentDisplayLengthEquality !== false) {
          return viewModelList();
        } else {
          return [];
        }
      }).extend({
        throttle: 1000
      });
      return this[list + "Asynch"] = ko.asynchComputedArray(this[list]);
    };

    JsonMapsViewModel.prototype.saveCreated = function() {
      var Url, createdNode, modelData, selectedNode,
        _this = this;
      selectedNode = this.nodeSelected();
      createdNode = this.nodeCreated();
      modelData = createdNode.initialCopy();
      if (selectedNode !== null) {
        selectedNode.toggleSelected();
      }
      if (selectedNode !== null) {
        Url = "/JsonMap/" + createdNode.postUrl + "Create/" + ko.toJS(selectedNode).Id;
      } else {
        Url = "/JsonMap/" + createdNode.postUrl + "Create/";
      }
      return $.ajax({
        type: 'Post',
        url: Url,
        datatype: 'text',
        data: modelData,
        success: function(data) {
          var init, needsUpdate;
          init = ko.utils.parseJson(data);
          if (init.Id != null) {
            _this.nodeCreated(null);
            createdNode.Id(init.Id);
            createdNode.updateBackup();
            _this["push" + MapToList[createdNode.constructor.name]](createdNode);
            if (selectedNode !== null) {
              needsUpdate = selectedNode.needsUpdate();
              selectedNode["push" + selectedNode.childVarName]({
                $type: createdNode['$type'],
                Id: init.Id
              });
              if (!needsUpdate) {
                selectedNode.updateBackup();
              }
              return setTimeout(function() {
                return selectedNode.toggleSelected();
              }, 1000);
            }
          }
        }
      });
    };

    JsonMapsViewModel.prototype.saveModified = function(updateNode) {
      var modelData, newChildren, selectedNode, val, _i, _len,
        _this = this;
      if (updateNode == null) {
        updateNode = this.nodeSelected();
      }
      selectedNode = this.nodeSelected();
      modelData = updateNode.copy();
      newChildren = ko.toJS(this.nodesCombination);
      if (updateNode === this.nodeSelected()) {
        modelData[modelData.childVarName].removeAll();
        for (_i = 0, _len = newChildren.length; _i < _len; _i++) {
          val = newChildren[_i];
          modelData["push" + modelData.childVarName](val);
        }
      }
      return $.ajax({
        type: 'Post',
        url: "/JsonMap/" + updateNode.postUrl + "Update",
        datatype: 'text',
        data: modelData.initialCopy(),
        success: function(data) {
          var _j, _len1;
          if (updateNode === selectedNode) {
            updateNode[updateNode.childVarName].removeAll();
            for (_j = 0, _len1 = newChildren.length; _j < _len1; _j++) {
              val = newChildren[_j];
              updateNode["push" + updateNode.childVarName](val);
            }
          }
          updateNode.updateBackup();
          _this.nodesAdded.removeAll();
          _this.nodesUnadded.removeAll();
          return updateNode.toggleSelected();
        },
        error: function(data) {
          alert(ko.utils.parseJson(data.responseText).message);
          return _this.nodeDeleted(null);
        }
      });
    };

    JsonMapsViewModel.prototype.deleteJsonMap = function() {
      var deletedNode, url,
        _this = this;
      deletedNode = this.nodeDeleted();
      url = "/JsonMap/" + this.nodeDeleted().postUrl + "Delete/" + ko.toJS(deletedNode).Id;
      return $.ajax({
        type: 'Post',
        url: url,
        success: function(data) {
          _this.nodeDeleted(null);
          if (data === "Success") {
            _this.recursiveRemoveJsonMaps(deletedNode, true);
            _this.nodesAdded.remove(deletedNode);
            return _this.nodesUnadded.remove(deletedNode);
          }
        },
        error: function(data) {
          alert(ko.utils.parseJson(data.responseText).message);
          return _this.nodeDeleted(null);
        }
      });
    };

    JsonMapsViewModel.prototype.saveMaps = function() {
      var url,
        _this = this;
      url = "/JsonMap/SaveMaps";
      return $.ajax({
        type: 'Post',
        url: url,
        success: function(data) {
          return console.log("Maps have been saved.");
        }
      });
    };

    JsonMapsViewModel.prototype.recursiveRemoveJsonMaps = function(jsonMap, isUpdated) {
      var type, val, _i, _len, _ref;
      jsonMap.remove(isUpdated);
      type = jsonMap.constructor.name.split("JsonMap")[0];
      this["remove" + MapToList[jsonMap.constructor.name]](jsonMap);
      if (type === "Entity" || type === "Validation") {
        _ref = $.grep(jsonMap.childList(), function(n) {
          return ko.utils.unwrapObservable(n.parentList).length === 0;
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          this.recursiveRemoveJsonMaps(val);
        }
      }
      return jsonMap.remove();
    };

    JsonMapsViewModel.prototype.unaddFromSelected = function(jsonMap) {
      if (this.nodeSelected().childList != null) {
        if (ko.utils.unwrapObservable(this.nodeSelected().childList).indexOf(jsonMap) === -1) {
          return this.nodesAdded.remove(jsonMap);
        } else {
          return this.nodesUnadded.push(jsonMap);
        }
      }
    };

    JsonMapsViewModel.prototype.addToSelected = function(jsonMap) {
      if (this.nodeSelected().childList != null) {
        if (ko.utils.unwrapObservable(this.nodeSelected().childList).indexOf(jsonMap) === -1) {
          return this.nodesAdded.push(jsonMap);
        } else {
          return this.nodesUnadded.remove(jsonMap);
        }
      }
    };

    JsonMapsViewModel.prototype.createNewViewModel = function(list) {
      if (this["pushNew" + list] != null) {
        this.createPushNewModelToArray(list);
      }
      this["pushNew" + list]();
      return this["remove" + list](this.nodeCreated());
    };

    JsonMapsViewModel.prototype.removeViewModel = function(item, list) {
      if (this["remove" + list] != null) {
        this.createRemoveModelFromArray(list);
      }
      this["remove" + list](item);
      if (this.nodeCreated() === item) {
        return this.nodeCreated(null);
      }
    };

    JsonMapsViewModel.prototype.showSelect = function(item) {
      return item.selected() || (this.nodeCreated() === null && this.nodesCombindationNoValues());
    };

    JsonMapsViewModel.prototype.showAdd = function(item, list) {
      return this.nodesCombination().indexOf(item) === -1 && this.nodeSelectedList() === list && this.nodeCreated() !== item;
    };

    JsonMapsViewModel.prototype.showUnadd = function(item, list) {
      return this.nodesCombination().indexOf(item) !== -1 && this.nodeSelectedList() === list && this.nodeCreated() !== item;
    };

    JsonMapsViewModel.prototype.showUpdate = function(item) {
      return ((this.nodeSelected() === item && !this.nodesCombindationNoValues()) || item.needsUpdate()) && this.nodeCreated() === null;
    };

    return JsonMapsViewModel;

  })(ko.ModelFactory.ViewModel);

  JsonMapViewModel = (function(_super) {
    __extends(JsonMapViewModel, _super);

    function JsonMapViewModel(initial, data) {
      JsonMapViewModel.__super__.constructor.call(this, initial, data);
      this.selected = ko.observable(false);
      this.childSelected = ko.observable(false);
      this.parentSelected = ko.observable(false);
      this.childList = function() {
        return [];
      };
      this.parentList = function() {
        return [];
      };
      this.childVarName = "";
      this.createBackup();
    }

    JsonMapViewModel.prototype.setParentList = function(parentList) {
      var _this = this;
      return this.parentList = ko.computed(function() {
        var parentArr;
        parentArr = $.grep(parentList(), function(n) {
          return $.grep(n.childList(), function(i) {
            return i === _this;
          }).length > 0;
        });
        if (parentArr.length === 0 && (_this.globalSelector != null) && _this.globalSelector() !== null) {
          parentArr = [_this.globalSelector()];
        }
        return parentArr;
      }).extend({
        throttle: 500
      });
    };

    JsonMapViewModel.prototype.setChildList = function(childList) {
      var _this = this;
      return this.childList = ko.computed(function() {
        return $.grep(childList(), function(n) {
          return $.grep(_this[_this.childVarName](), function(i) {
            return i.Id() === n.Id();
          }).length > 0;
        });
      }).extend({
        throttle: 500
      });
    };

    JsonMapViewModel.prototype.setGlobalSelector = function(parent) {
      return this.globalSelector = parent;
    };

    JsonMapViewModel.prototype.toggleSelected = function(changeGlobal) {
      var val, _i, _j, _len, _len1, _ref, _ref1;
      if (changeGlobal == null) {
        changeGlobal = false;
      }
      if (this !== this.globalSelector() && !changeGlobal && this.globalSelector() !== null) {
        if ((this.globalSelector().selected != null) && this.globalSelector().selected()) {
          this.globalSelector().toggleSelected(true);
        }
      }
      this.globalSelector(this);
      this.globalSelector().selected(!this.selected());
      if (this.childList != null) {
        _ref = this.childList();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          val.setParentSelected(this.selected());
        }
      }
      if (this.parentList != null) {
        _ref1 = this.parentList();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          val = _ref1[_j];
          val.setChildSelected(this.selected());
        }
      }
      if (!this.selected() && !changeGlobal) {
        return this.globalSelector(null);
      }
    };

    JsonMapViewModel.prototype.setParentSelected = function(selected) {
      var val, _i, _len, _ref, _results;
      this.parentSelected(selected);
      if (this.childList != null) {
        _ref = this.childList();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          _results.push(val.setParentSelected(selected));
        }
        return _results;
      }
    };

    JsonMapViewModel.prototype.setChildSelected = function(selected) {
      var val, _i, _len, _ref, _results;
      this.childSelected(selected);
      if (this.parentList != null) {
        _ref = this.parentList();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          _results.push(val.setChildSelected(selected));
        }
        return _results;
      }
    };

    JsonMapViewModel.prototype.remove = function(isUpdated) {
      var val, _i, _len, _ref;
      if (this.parentList != null) {
        _ref = ko.utils.unwrapObservable(this.parentList);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          val.removeChild(this);
          if (isUpdated) {
            val.updateBackup();
          }
        }
      }
      return this;
    };

    JsonMapViewModel.prototype.removeChild = function(childViewModel) {
      var val, _i, _len, _ref, _results;
      _ref = $.grep(this[this.childVarName](), function(n) {
        return n.Id() === ko.utils.unwrapObservable(childViewModel.Id);
      });
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        _results.push(this["remove" + this.childVarName](val));
      }
      return _results;
    };

    return JsonMapViewModel;

  })(ko.ModelFactory.ViewModel);

  EntityJsonMapViewModel = (function(_super) {
    __extends(EntityJsonMapViewModel, _super);

    function EntityJsonMapViewModel(initial, data) {
      EntityJsonMapViewModel.__super__.constructor.call(this, initial, data);
      this.childVarName = "Attributes";
      this.postUrl = "Entity";
    }

    return EntityJsonMapViewModel;

  })(JsonMapViewModel);

  AttributeJsonMapViewModel = (function(_super) {
    __extends(AttributeJsonMapViewModel, _super);

    function AttributeJsonMapViewModel(initial, data) {
      AttributeJsonMapViewModel.__super__.constructor.call(this, initial, data);
      this.childVarName = "Validations";
      this.postUrl = "Attribute";
    }

    return AttributeJsonMapViewModel;

  })(JsonMapViewModel);

  ValidationJsonMapViewModel = (function(_super) {
    __extends(ValidationJsonMapViewModel, _super);

    function ValidationJsonMapViewModel(initial, data) {
      ValidationJsonMapViewModel.__super__.constructor.call(this, initial, data);
      this.childVarName = "Arguments";
      this.postUrl = "Validation";
    }

    return ValidationJsonMapViewModel;

  })(JsonMapViewModel);

  ArgumentJsonMapViewModel = (function(_super) {
    __extends(ArgumentJsonMapViewModel, _super);

    function ArgumentJsonMapViewModel(initial, data) {
      ArgumentJsonMapViewModel.__super__.constructor.call(this, initial, data);
      this.childVarName = "JsonMap";
      this.postUrl = "Argument";
      this[this.childVarName] = ko.observableArray([]);
    }

    return ArgumentJsonMapViewModel;

  })(JsonMapViewModel);

  TypeListViewModel = (function(_super) {
    __extends(TypeListViewModel, _super);

    function TypeListViewModel(initial, data) {
      this.createAttributesListObservable = __bind(this.createAttributesListObservable, this);
      var _this = this;
      TypeListViewModel.__super__.constructor.call(this, initial, data);
      this.TypeList = ko.computed(function() {
        var filtered, pairs;
        pairs = _.pairs(_this.TypeAttributeList);
        filtered = _.filter(pairs, function(pair) {
          return ko.isObservable(pair[1]);
        });
        return _.map(filtered, function(pair) {
          return pair[0];
        });
      }).extend({
        throttle: 500
      });
    }

    TypeListViewModel.prototype.createAttributesListObservable = function(attribute) {
      var _this = this;
      return ko.computed(function() {
        var attributeArray, key, keyArr, _i, _len;
        keyArr = $.grep(_this.TypeList(), function(n) {
          return $.grep(attribute.parentList(), function(i) {
            return n === i.Name();
          }).length > 0;
        });
        attributeArray = [];
        for (_i = 0, _len = keyArr.length; _i < _len; _i++) {
          key = keyArr[_i];
          attributeArray.push(_.map(_this.TypeAttributeList[key](), function(name) {
            return ko.utils.unwrapObservable(name.Name);
          }));
        }
        return _.reduce(attributeArray, function(sum, num) {
          return _.intersection(sum, num);
        });
      }).extend({
        throttle: 500
      });
    };

    return TypeListViewModel;

  })(ko.ModelFactory.ViewModel);

  ValidationMethodListViewModel = (function(_super) {
    __extends(ValidationMethodListViewModel, _super);

    function ValidationMethodListViewModel(initial, data) {
      this.createArgumentsListObservable = __bind(this.createArgumentsListObservable, this);
      var _this = this;
      ValidationMethodListViewModel.__super__.constructor.call(this, initial, data);
      this.ValidMethodList = ko.computed(function() {
        var filtered, pairs;
        pairs = _.pairs(_this.ValidationMethodList);
        filtered = _.filter(pairs, function(pair) {
          return ko.isObservable(pair[1]);
        });
        return _.map(filtered, function(pair) {
          return pair[0];
        });
      }).extend({
        throttle: 500
      });
    }

    ValidationMethodListViewModel.prototype.createArgumentsListObservable = function(Argument) {
      var _this = this;
      return ko.computed(function() {
        var argumentArray, key, keyArr, _i, _len;
        keyArr = $.grep(_this.ValidMethodList(), function(n) {
          return $.grep(Argument.parentList(), function(i) {
            return n === i.Name();
          }).length > 0;
        });
        argumentArray = [];
        for (_i = 0, _len = keyArr.length; _i < _len; _i++) {
          key = keyArr[_i];
          argumentArray.push(_.map(_this.ValidationMethodList[key](), function(name) {
            return ko.utils.unwrapObservable(name.Name);
          }));
        }
        _.reduce(argumentArray, function(sum, num) {
          return _.intersection(sum, num);
        });
        return _.flatten(argumentArray);
      }).extend({
        throttle: 500
      });
    };

    return ValidationMethodListViewModel;

  })(ko.ModelFactory.ViewModel);

  ko.ModelFactory.JsonMapViewModel = JsonMapViewModel;

  ko.ModelFactory.JsonMapsViewModel = JsonMapsViewModel;

  ko.ModelFactory.EntityJsonMapViewModel = EntityJsonMapViewModel;

  ko.ModelFactory.AttributeJsonMapViewModel = AttributeJsonMapViewModel;

  ko.ModelFactory.ValidationJsonMapViewModel = ValidationJsonMapViewModel;

  ko.ModelFactory.ArgumentJsonMapViewModel = ArgumentJsonMapViewModel;

  ko.ModelFactory.TypeListViewModel = TypeListViewModel;

  ko.ModelFactory.ValidationMethodListViewModel = ValidationMethodListViewModel;

}).call(this);

/*
//@ sourceMappingURL=JsonMapViewModel.map
*/
