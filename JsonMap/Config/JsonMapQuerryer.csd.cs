//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JsonMap
{
    
    
    /// <summary>
    /// The JsonMapSection Configuration Section.
    /// </summary>
    public partial class JsonMapSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the JsonMapSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string JsonMapSectionSectionName = "jsonMapSection";
        
        /// <summary>
        /// Gets the JsonMapSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::JsonMap.JsonMapSection Instance
        {
            get
            {
                return ((global::JsonMap.JsonMapSection)(global::System.Configuration.ConfigurationManager.GetSection(global::JsonMap.JsonMapSection.JsonMapSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::JsonMap.JsonMapSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region JsonMapQueryer Property
        /// <summary>
        /// The XML name of the <see cref="JsonMapQueryer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string JsonMapQueryerPropertyName = "jsonMapQueryer";
        
        /// <summary>
        /// Gets or sets the JsonMapQueryer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The JsonMapQueryer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapSection.JsonMapQueryerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::JsonMap.JsonMapQueryer JsonMapQueryer
        {
            get
            {
                return ((global::JsonMap.JsonMapQueryer)(base[global::JsonMap.JsonMapSection.JsonMapQueryerPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapSection.JsonMapQueryerPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// The JsonMapQueryer Configuration Element.
    /// </summary>
    public partial class JsonMapQueryer : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region JsonMapQueryerType Property
        /// <summary>
        /// The XML name of the <see cref="JsonMapQueryerType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string JsonMapQueryerTypePropertyName = "jsonMapQueryerType";
        
        /// <summary>
        /// Gets or sets the JsonMapQueryerType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The JsonMapQueryerType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapQueryer.JsonMapQueryerTypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string JsonMapQueryerType
        {
            get
            {
                return ((string)(base[global::JsonMap.JsonMapQueryer.JsonMapQueryerTypePropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapQueryer.JsonMapQueryerTypePropertyName] = value;
            }
        }
        #endregion
        
        #region SavedMapFileName Property
        /// <summary>
        /// The XML name of the <see cref="SavedMapFileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string SavedMapFileNamePropertyName = "savedMapFileName";
        
        /// <summary>
        /// Gets or sets the SavedMapFileName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SavedMapFileName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapQueryer.SavedMapFileNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string SavedMapFileName
        {
            get
            {
                return ((string)(base[global::JsonMap.JsonMapQueryer.SavedMapFileNamePropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapQueryer.SavedMapFileNamePropertyName] = value;
            }
        }
        #endregion
        
        #region ValidationClasses Property
        /// <summary>
        /// The XML name of the <see cref="ValidationClasses"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ValidationClassesPropertyName = "validationClasses";
        
        /// <summary>
        /// Gets or sets the ValidationClasses.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ValidationClasses.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapQueryer.ValidationClassesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::JsonMap.ValidationClasses ValidationClasses
        {
            get
            {
                return ((global::JsonMap.ValidationClasses)(base[global::JsonMap.JsonMapQueryer.ValidationClassesPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapQueryer.ValidationClassesPropertyName] = value;
            }
        }
        #endregion
        
        #region MappingAssemblies Property
        /// <summary>
        /// The XML name of the <see cref="MappingAssemblies"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MappingAssembliesPropertyName = "mappingAssemblies";
        
        /// <summary>
        /// Gets or sets the MappingAssemblies.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MappingAssemblies.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapQueryer.MappingAssembliesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::JsonMap.MappingAssemblies MappingAssemblies
        {
            get
            {
                return ((global::JsonMap.MappingAssemblies)(base[global::JsonMap.JsonMapQueryer.MappingAssembliesPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapQueryer.MappingAssembliesPropertyName] = value;
            }
        }
        #endregion
        
        #region MappingNamespaces Property
        /// <summary>
        /// The XML name of the <see cref="MappingNamespaces"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MappingNamespacesPropertyName = "mappingNamespaces";
        
        /// <summary>
        /// Gets or sets the MappingNamespaces.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MappingNamespaces.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapQueryer.MappingNamespacesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::JsonMap.MappingNamespaces MappingNamespaces
        {
            get
            {
                return ((global::JsonMap.MappingNamespaces)(base[global::JsonMap.JsonMapQueryer.MappingNamespacesPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapQueryer.MappingNamespacesPropertyName] = value;
            }
        }
        #endregion
        
        #region JSTypeEnumConfig Property
        /// <summary>
        /// The XML name of the <see cref="JSTypeEnumConfig"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string JSTypeEnumConfigPropertyName = "jSTypeEnumConfig";
        
        /// <summary>
        /// Gets or sets the JSTypeEnumConfig.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The JSTypeEnumConfig.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapQueryer.JSTypeEnumConfigPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::JsonMap.JSTypeEnumConfig JSTypeEnumConfig
        {
            get
            {
                return ((global::JsonMap.JSTypeEnumConfig)(base[global::JsonMap.JsonMapQueryer.JSTypeEnumConfigPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapQueryer.JSTypeEnumConfigPropertyName] = value;
            }
        }
        #endregion
        
        #region JsonMapEnumConfig Property
        /// <summary>
        /// The XML name of the <see cref="JsonMapEnumConfig"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string JsonMapEnumConfigPropertyName = "jsonMapEnumConfig";
        
        /// <summary>
        /// Gets or sets the JsonMapEnumConfig.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The JsonMapEnumConfig.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapQueryer.JsonMapEnumConfigPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::JsonMap.JsonMapEnumConfig JsonMapEnumConfig
        {
            get
            {
                return ((global::JsonMap.JsonMapEnumConfig)(base[global::JsonMap.JsonMapQueryer.JsonMapEnumConfigPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapQueryer.JsonMapEnumConfigPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// The JSTypeEnumConfig Configuration Element.
    /// </summary>
    public partial class JSTypeEnumConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ObservableArrayEnum Property
        /// <summary>
        /// The XML name of the <see cref="ObservableArrayEnum"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ObservableArrayEnumPropertyName = "observableArrayEnum";
        
        /// <summary>
        /// Gets or sets the ObservableArrayEnum.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ObservableArrayEnum.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JSTypeEnumConfig.ObservableArrayEnumPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public long ObservableArrayEnum
        {
            get
            {
                return ((long)(base[global::JsonMap.JSTypeEnumConfig.ObservableArrayEnumPropertyName]));
            }
            set
            {
                base[global::JsonMap.JSTypeEnumConfig.ObservableArrayEnumPropertyName] = value;
            }
        }
        #endregion
        
        #region EnumType Property
        /// <summary>
        /// The XML name of the <see cref="EnumType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string EnumTypePropertyName = "enumType";
        
        /// <summary>
        /// Gets or sets the EnumType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EnumType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JSTypeEnumConfig.EnumTypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string EnumType
        {
            get
            {
                return ((string)(base[global::JsonMap.JSTypeEnumConfig.EnumTypePropertyName]));
            }
            set
            {
                base[global::JsonMap.JSTypeEnumConfig.EnumTypePropertyName] = value;
            }
        }
        #endregion
        
        #region PrimativeEnum Property
        /// <summary>
        /// The XML name of the <see cref="PrimativeEnum"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string PrimativeEnumPropertyName = "primativeEnum";
        
        /// <summary>
        /// Gets or sets the PrimativeEnum.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PrimativeEnum.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JSTypeEnumConfig.PrimativeEnumPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public long PrimativeEnum
        {
            get
            {
                return ((long)(base[global::JsonMap.JSTypeEnumConfig.PrimativeEnumPropertyName]));
            }
            set
            {
                base[global::JsonMap.JSTypeEnumConfig.PrimativeEnumPropertyName] = value;
            }
        }
        #endregion
        
        #region ViewModelEnum Property
        /// <summary>
        /// The XML name of the <see cref="ViewModelEnum"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ViewModelEnumPropertyName = "viewModelEnum";
        
        /// <summary>
        /// Gets or sets the ViewModelEnum.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ViewModelEnum.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JSTypeEnumConfig.ViewModelEnumPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public long ViewModelEnum
        {
            get
            {
                return ((long)(base[global::JsonMap.JSTypeEnumConfig.ViewModelEnumPropertyName]));
            }
            set
            {
                base[global::JsonMap.JSTypeEnumConfig.ViewModelEnumPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// The JsonMapEnumConfig Configuration Element.
    /// </summary>
    public partial class JsonMapEnumConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region EnumType Property
        /// <summary>
        /// The XML name of the <see cref="EnumType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string EnumTypePropertyName = "enumType";
        
        /// <summary>
        /// Gets or sets the EnumType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EnumType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapEnumConfig.EnumTypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string EnumType
        {
            get
            {
                return ((string)(base[global::JsonMap.JsonMapEnumConfig.EnumTypePropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapEnumConfig.EnumTypePropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultMapEnum Property
        /// <summary>
        /// The XML name of the <see cref="DefaultMapEnum"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string DefaultMapEnumPropertyName = "defaultMapEnum";
        
        /// <summary>
        /// Gets or sets the DefaultMapEnum.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultMapEnum.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapEnumConfig.DefaultMapEnumPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public long DefaultMapEnum
        {
            get
            {
                return ((long)(base[global::JsonMap.JsonMapEnumConfig.DefaultMapEnumPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapEnumConfig.DefaultMapEnumPropertyName] = value;
            }
        }
        #endregion
        
        #region InheritedMapEnum Property
        /// <summary>
        /// The XML name of the <see cref="InheritedMapEnum"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string InheritedMapEnumPropertyName = "inheritedMapEnum";
        
        /// <summary>
        /// Gets or sets the InheritedMapEnum.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The InheritedMapEnum.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.JsonMapEnumConfig.InheritedMapEnumPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public long InheritedMapEnum
        {
            get
            {
                return ((long)(base[global::JsonMap.JsonMapEnumConfig.InheritedMapEnumPropertyName]));
            }
            set
            {
                base[global::JsonMap.JsonMapEnumConfig.InheritedMapEnumPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// A collection of ValidationClass instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JsonMap.ValidationClass), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::JsonMap.ValidationClasses.ValidationClassPropertyName)]
    public partial class ValidationClasses : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JsonMap.ValidationClass"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ValidationClassPropertyName = "validationClass";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::JsonMap.ValidationClasses.ValidationClassPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JsonMap.ValidationClasses.ValidationClassPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JsonMap.ValidationClass)(element)).StaticClass;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JsonMap.ValidationClass"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JsonMap.ValidationClass"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JsonMap.ValidationClass();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JsonMap.ValidationClass"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JsonMap.ValidationClass"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.ValidationClass this[int index]
        {
            get
            {
                return ((global::JsonMap.ValidationClass)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JsonMap.ValidationClass"/> with the specified key.
        /// </summary>
        /// <param name="staticClass">The key of the <see cref="global::JsonMap.ValidationClass"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.ValidationClass this[object staticClass]
        {
            get
            {
                return ((global::JsonMap.ValidationClass)(base.BaseGet(staticClass)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JsonMap.ValidationClass"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="validationClass">The <see cref="global::JsonMap.ValidationClass"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::JsonMap.ValidationClass validationClass)
        {
            base.BaseAdd(validationClass);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::JsonMap.ValidationClass"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="validationClass">The <see cref="global::JsonMap.ValidationClass"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::JsonMap.ValidationClass validationClass)
        {
            base.BaseRemove(this.GetElementKey(validationClass));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::JsonMap.ValidationClass"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JsonMap.ValidationClass"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.ValidationClass GetItemAt(int index)
        {
            return ((global::JsonMap.ValidationClass)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::JsonMap.ValidationClass"/> with the specified key.
        /// </summary>
        /// <param name="staticClass">The key of the <see cref="global::JsonMap.ValidationClass"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.ValidationClass GetItemByKey(string staticClass)
        {
            return ((global::JsonMap.ValidationClass)(base.BaseGet(((object)(staticClass)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region NotNullMethod Property
        /// <summary>
        /// The XML name of the <see cref="NotNullMethod"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string NotNullMethodPropertyName = "notNullMethod";
        
        /// <summary>
        /// Gets or sets the NotNullMethod.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NotNullMethod.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.ValidationClasses.NotNullMethodPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string NotNullMethod
        {
            get
            {
                return ((string)(base[global::JsonMap.ValidationClasses.NotNullMethodPropertyName]));
            }
            set
            {
                base[global::JsonMap.ValidationClasses.NotNullMethodPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// A collection of MappingAssembly instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JsonMap.MappingAssembly), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::JsonMap.MappingAssemblies.MappingAssemblyPropertyName)]
    public partial class MappingAssemblies : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JsonMap.MappingAssembly"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MappingAssemblyPropertyName = "mappingAssembly";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::JsonMap.MappingAssemblies.MappingAssemblyPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JsonMap.MappingAssemblies.MappingAssemblyPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JsonMap.MappingAssembly)(element)).AssemblyName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JsonMap.MappingAssembly"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JsonMap.MappingAssembly"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JsonMap.MappingAssembly();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingAssembly"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JsonMap.MappingAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingAssembly this[int index]
        {
            get
            {
                return ((global::JsonMap.MappingAssembly)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingAssembly"/> with the specified key.
        /// </summary>
        /// <param name="assemblyName">The key of the <see cref="global::JsonMap.MappingAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingAssembly this[object assemblyName]
        {
            get
            {
                return ((global::JsonMap.MappingAssembly)(base.BaseGet(assemblyName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JsonMap.MappingAssembly"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="mappingAssembly">The <see cref="global::JsonMap.MappingAssembly"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::JsonMap.MappingAssembly mappingAssembly)
        {
            base.BaseAdd(mappingAssembly);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::JsonMap.MappingAssembly"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="mappingAssembly">The <see cref="global::JsonMap.MappingAssembly"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::JsonMap.MappingAssembly mappingAssembly)
        {
            base.BaseRemove(this.GetElementKey(mappingAssembly));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingAssembly"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JsonMap.MappingAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingAssembly GetItemAt(int index)
        {
            return ((global::JsonMap.MappingAssembly)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingAssembly"/> with the specified key.
        /// </summary>
        /// <param name="assemblyName">The key of the <see cref="global::JsonMap.MappingAssembly"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingAssembly GetItemByKey(string assemblyName)
        {
            return ((global::JsonMap.MappingAssembly)(base.BaseGet(((object)(assemblyName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// The ValidationClass Configuration Element.
    /// </summary>
    public partial class ValidationClass : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region StaticClass Property
        /// <summary>
        /// The XML name of the <see cref="StaticClass"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string StaticClassPropertyName = "staticClass";
        
        /// <summary>
        /// Gets or sets the StaticClass.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The StaticClass.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.ValidationClass.StaticClassPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string StaticClass
        {
            get
            {
                return ((string)(base[global::JsonMap.ValidationClass.StaticClassPropertyName]));
            }
            set
            {
                base[global::JsonMap.ValidationClass.StaticClassPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// The MappingAssembly Configuration Element.
    /// </summary>
    public partial class MappingAssembly : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AssemblyName Property
        /// <summary>
        /// The XML name of the <see cref="AssemblyName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string AssemblyNamePropertyName = "assemblyName";
        
        /// <summary>
        /// Gets or sets the AssemblyName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AssemblyName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.MappingAssembly.AssemblyNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string AssemblyName
        {
            get
            {
                return ((string)(base[global::JsonMap.MappingAssembly.AssemblyNamePropertyName]));
            }
            set
            {
                base[global::JsonMap.MappingAssembly.AssemblyNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// A collection of MappingNamespace instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::JsonMap.MappingNamespace), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::JsonMap.MappingNamespaces.MappingNamespacePropertyName)]
    public partial class MappingNamespaces : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::JsonMap.MappingNamespace"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string MappingNamespacePropertyName = "mappingNamespace";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::JsonMap.MappingNamespaces.MappingNamespacePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::JsonMap.MappingNamespaces.MappingNamespacePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::JsonMap.MappingNamespace)(element)).Namespace;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::JsonMap.MappingNamespace"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::JsonMap.MappingNamespace"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::JsonMap.MappingNamespace();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingNamespace"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JsonMap.MappingNamespace"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingNamespace this[int index]
        {
            get
            {
                return ((global::JsonMap.MappingNamespace)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingNamespace"/> with the specified key.
        /// </summary>
        /// <param name="namespace">The key of the <see cref="global::JsonMap.MappingNamespace"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingNamespace this[object @namespace]
        {
            get
            {
                return ((global::JsonMap.MappingNamespace)(base.BaseGet(@namespace)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::JsonMap.MappingNamespace"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="mappingNamespace">The <see cref="global::JsonMap.MappingNamespace"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::JsonMap.MappingNamespace mappingNamespace)
        {
            base.BaseAdd(mappingNamespace);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::JsonMap.MappingNamespace"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="mappingNamespace">The <see cref="global::JsonMap.MappingNamespace"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::JsonMap.MappingNamespace mappingNamespace)
        {
            base.BaseRemove(this.GetElementKey(mappingNamespace));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingNamespace"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::JsonMap.MappingNamespace"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingNamespace GetItemAt(int index)
        {
            return ((global::JsonMap.MappingNamespace)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::JsonMap.MappingNamespace"/> with the specified key.
        /// </summary>
        /// <param name="namespace">The key of the <see cref="global::JsonMap.MappingNamespace"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::JsonMap.MappingNamespace GetItemByKey(string @namespace)
        {
            return ((global::JsonMap.MappingNamespace)(base.BaseGet(((object)(@namespace)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace JsonMap
{
    
    
    /// <summary>
    /// The MappingNamespace Configuration Element.
    /// </summary>
    public partial class MappingNamespace : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Namespace Property
        /// <summary>
        /// The XML name of the <see cref="Namespace"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string NamespacePropertyName = "namespace";
        
        /// <summary>
        /// Gets or sets the Namespace.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Namespace.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::JsonMap.MappingNamespace.NamespacePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Namespace
        {
            get
            {
                return ((string)(base[global::JsonMap.MappingNamespace.NamespacePropertyName]));
            }
            set
            {
                base[global::JsonMap.MappingNamespace.NamespacePropertyName] = value;
            }
        }
        #endregion
    }
}
